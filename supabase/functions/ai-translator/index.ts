
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, conversationHistory = [] } = await req.json();

    const systemPrompt = `Jsi specializovan√Ω AI asistent pro nƒõmecko-ƒçesk√Ω p≈ôeklad a v√Ωuku jazyka. Pom√°h√°≈° ƒçesk√Ωm pendler≈Øm a pracovn√≠k≈Øm v Nƒõmecku s komunikac√≠.

TVOJE HLAVN√ç FUNKCE:
- P≈ôeklady mezi ƒçe≈°tinou a nƒõmƒçinou s kontextov√Ωm vysvƒõtlen√≠m
- Vysvƒõtlen√≠ gramatiky, v√Ωslovnosti a kulturn√≠ch rozd√≠l≈Ø
- Praktick√© rady pro komunikaci v pr√°ci, na √∫≈ôadech, v obchodech
- Pomoc s konkr√©tn√≠mi situacemi (pohovory, prezentace, dokumenty)
- V√Ωuka z√°kladn√≠ch a pokroƒçil√Ωch jazykov√Ωch konstrukc√≠

STYL ODPOVƒöD√ç:
- P≈ô√°telsk√Ω a podporuj√≠c√≠ t√≥n
- Strukturovan√© odpovƒõdi s jasn√Ωm rozdƒõlen√≠m
- V≈ædy uveƒè p≈ôeklad + vysvƒõtlen√≠ kontextu
- Praktick√© p≈ô√≠klady pou≈æit√≠
- Kr√°tk√©, ale kompletn√≠ informace
- Pou≈æ√≠vej ƒçesk√© znaky spr√°vnƒõ

FORM√ÅT ODPOVƒöD√ç:
Pokud u≈æivatel ≈æ√°d√° p≈ôeklad:
üîÑ **P≈ôeklad**: [p≈ôelo≈æen√Ω text]
üìù **Kontext**: [kdy a jak pou≈æ√≠t]
üí° **Tip**: [praktick√° rada nebo alternativa]

Pro slo≈æitƒõj≈°√≠ ot√°zky strukturuj odpovƒõƒè logicky s emoji pro lep≈°√≠ orientaci.

Specializuje≈° se na praktick√© situace ƒçesk√Ωch pendler≈Ø v Nƒõmecku.`;

    const messages = [
      { role: 'system', content: systemPrompt },
      ...conversationHistory.map((msg: any) => ({
        role: msg.role,
        content: msg.content
      })),
      { role: 'user', content: message }
    ];

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: messages,
        temperature: 0.7,
        max_tokens: 1000,
      }),
    });

    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.error?.message || 'OpenAI API error');
    }

    const aiResponse = data.choices[0].message.content;

    return new Response(JSON.stringify({ 
      response: aiResponse,
      usage: data.usage 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in ai-translator function:', error);
    return new Response(JSON.stringify({ 
      error: error.message || 'Do≈°lo k chybƒõ p≈ôi zpracov√°n√≠ po≈æadavku' 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
