
import React from 'react';
import { pdf } from '@react-pdf/renderer';
import { ModernPDFTemplate } from './ModernPDFTemplate';
import { ModernSection, ModernTable, ModernInfoBox, ModernStatsGrid } from './ModernPDFComponents';
import { DocumentData } from '../../tax/types';
import { getDocumentTitle } from '../../tax/documentUtils';

interface ModernTaxDocumentProps {
  data: DocumentData;
}

const ModernTaxDocument: React.FC<ModernTaxDocumentProps> = ({ data }) => {
  const documentTitle = getDocumentTitle(data.documentType);
  const subtitle = `Zda≈àovac√≠ obdob√≠: ${data.yearOfTax} ‚Ä¢ Profesion√°ln√≠ p≈ô√≠prava`;

  // Calculate deductions
  const deductions = [];
  let totalDeductions = 0;

  if (data.includeCommuteExpenses) {
    const commuteCostPerKm = 0.30;
    const totalCommuteDays = parseInt(data.commuteWorkDays || '220');
    const commuteDistance = parseInt(data.commuteDistance || '0');
    const totalCommuteCost = commuteCostPerKm * commuteDistance * totalCommuteDays;
    totalDeductions += totalCommuteCost;
    
    deductions.push([
      'N√°klady na doj√≠≈ædƒõn√≠',
      `${commuteDistance} km √ó ${totalCommuteDays} dn√≠ √ó 0.30‚Ç¨`,
      `${totalCommuteCost.toFixed(2)} ‚Ç¨`
    ]);
  }

  if (data.includeSecondHome) {
    const secondHomeCost = 1200;
    totalDeductions += secondHomeCost;
    deductions.push(['Druh√© bydlen√≠ v Nƒõmecku', 'Pau≈°√°ln√≠ roƒçn√≠ n√°klad', `${secondHomeCost} ‚Ç¨`]);
  }

  if (data.includeWorkClothes) {
    const workClothesCost = 400;
    totalDeductions += workClothesCost;
    deductions.push(['Pracovn√≠ odƒõvy a pom≈Øcky', 'Pau≈°√°ln√≠ roƒçn√≠ n√°klad', `${workClothesCost} ‚Ç¨`]);
  }

  const estimatedSaving = totalDeductions * 0.25;

  const statsData = [
    { label: 'Celkem odpoƒçet', value: `${totalDeductions.toFixed(0)} ‚Ç¨` },
    { label: 'Odhadovan√° √∫spora', value: `${estimatedSaving.toFixed(0)} ‚Ç¨` },
    { label: 'Da≈àov√° sazba', value: '25%' },
    { label: 'Roƒçn√≠ benefit', value: `${(estimatedSaving * 12).toFixed(0)} ‚Ç¨` }
  ];

  return (
    <ModernPDFTemplate title={documentTitle} subtitle={subtitle}>
      {/* Personal Information */}
      <ModernSection title="üë§ Osobn√≠ √∫daje">
        <ModernTable
          headers={['Polo≈æka', 'Hodnota']}
          data={[
            ['Jm√©no a p≈ô√≠jmen√≠', data.name || 'Neuvedeno'],
            ['Da≈àov√© identifikaƒçn√≠ ƒç√≠slo', data.taxId || 'Neuvedeno'],
            ['Adresa trval√©ho bydli≈°tƒõ', data.address || 'Neuvedeno'],
            ['Datum narozen√≠', data.dateOfBirth || 'Neuvedeno'],
            ['Email', data.email || 'Neuvedeno']
          ]}
        />
      </ModernSection>

      {/* Employment Information */}
      {(data.employerName || data.incomeAmount) && (
        <ModernSection title="üíº √ödaje o zamƒõstn√°n√≠">
          <ModernTable
            headers={['Polo≈æka', 'Hodnota']}
            data={[
              ['Zamƒõstnavatel', data.employerName || 'Neuvedeno'],
              ['Roƒçn√≠ p≈ô√≠jem (‚Ç¨)', data.incomeAmount ? `${data.incomeAmount} ‚Ç¨` : 'Neuvedeno']
            ]}
          />
        </ModernSection>
      )}

      {/* Deductible Items */}
      <ModernSection title="üí∞ Odpoƒçitateln√© polo≈æky">
        {deductions.length > 0 ? (
          <>
            <ModernTable
              headers={['Polo≈æka', 'V√Ωpoƒçet', 'ƒå√°stka (‚Ç¨)']}
              data={[...deductions, ['', 'CELKEM ODPOƒåET', `${totalDeductions.toFixed(2)} ‚Ç¨`]]}
            />
            
            <ModernStatsGrid stats={statsData} />
            
            <ModernInfoBox type="success">
              üéØ Profesion√°ln√≠ tip: S tƒõmito odpoƒçty m≈Ø≈æete u≈°et≈ôit a≈æ {estimatedSaving.toFixed(2)} ‚Ç¨ roƒçnƒõ na dani. 
              Nezapome≈àte si p≈ôipravit v≈°echny pot≈ôebn√© doklady p≈ôed pod√°n√≠m da≈àov√©ho p≈ôizn√°n√≠.
            </ModernInfoBox>
          </>
        ) : (
          <ModernInfoBox type="warning">
            ‚ÑπÔ∏è Nebyly vybr√°ny ≈æ√°dn√© odpoƒçitateln√© polo≈æky. Pro optimalizaci dan√≠ zva≈æte vyu≈æit√≠ dostupn√Ωch odpoƒçt≈Ø.
          </ModernInfoBox>
        )}
      </ModernSection>

      {/* Additional Notes */}
      {data.additionalNotes && (
        <ModernSection title="üìù Dopl≈àuj√≠c√≠ pozn√°mky">
          <ModernTable
            headers={['Pozn√°mky a dodateƒçn√© informace']}
            data={[[data.additionalNotes]]}
          />
        </ModernSection>
      )}

      <ModernInfoBox>
        üìã Dokument byl vygenerov√°n syst√©mem PendlerApp dne {new Date().toLocaleDateString('cs-CZ')} v {new Date().toLocaleTimeString('cs-CZ')}.
        Pro jak√©koliv dotazy kontaktujte n√°≈° t√Ωm na www.pendlerapp.cz
      </ModernInfoBox>
    </ModernPDFTemplate>
  );
};

export const generateModernTaxDocument = async (data: DocumentData): Promise<Blob> => {
  const blob = await pdf(<ModernTaxDocument data={data} />).toBlob();
  return blob;
};

export const downloadModernTaxDocument = async (data: DocumentData): Promise<void> => {
  const blob = await generateModernTaxDocument(data);
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `PendlerApp_${getDocumentTitle(data.documentType).replace(/\s+/g, '_').toLowerCase()}_${data.yearOfTax}_modern.pdf`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};
