
import { jsPDF } from 'jspdf';

// Profesionální brand colors
export const PROFESSIONAL_COLORS = {
  primary: {
    main: '#2563eb', // Modern blue
    light: '#3b82f6',
    dark: '#1e40af',
    50: '#eff6ff',
    100: '#dbeafe',
    500: '#3b82f6',
    900: '#1e3a8a'
  },
  secondary: {
    main: '#64748b', // Slate
    light: '#94a3b8',
    dark: '#475569'
  },
  accent: {
    main: '#f59e0b', // Amber
    light: '#fbbf24',
    dark: '#d97706'
  },
  neutral: {
    50: '#f8fafc',
    100: '#f1f5f9',
    200: '#e2e8f0',
    300: '#cbd5e1',
    400: '#94a3b8',
    500: '#64748b',
    600: '#475569',
    700: '#334155',
    800: '#1e293b',
    900: '#0f172a'
  },
  success: '#10b981',
  warning: '#f59e0b',
  error: '#ef4444',
  white: '#ffffff'
};

// Typography scale
export const TYPOGRAPHY = {
  h1: { size: 24, weight: 'bold' },
  h2: { size: 20, weight: 'bold' },
  h3: { size: 16, weight: 'bold' },
  h4: { size: 14, weight: 'bold' },
  body: { size: 11, weight: 'normal' },
  small: { size: 9, weight: 'normal' },
  caption: { size: 8, weight: 'normal' }
};

// Spacing system (8px grid)
export const SPACING = {
  xs: 2,
  sm: 4,
  md: 8,
  lg: 16,
  xl: 24,
  xxl: 32
};

// Professional PDF initialization
export const initializeProfessionalPDF = (): jsPDF => {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
    putOnlyUsedFonts: true,
    compress: true
  });

  // Set document metadata
  doc.setProperties({
    title: 'PendlerApp - Professional Document',
    subject: 'Generated by PendlerApp Professional PDF System',
    author: 'PendlerApp',
    creator: 'PendlerApp Professional PDF System',
    keywords: 'pendler, czech, commuter, professional'
  });

  // Use Helvetica with proper Unicode support for Czech
  doc.setFont("helvetica");
  
  return doc;
};

// Professional header with modern gradient design
export const addProfessionalHeader = (
  doc: jsPDF, 
  title: string, 
  subtitle?: string,
  variant: 'primary' | 'secondary' | 'accent' = 'primary'
): void => {
  const pageWidth = doc.internal.pageSize.width;
  const headerHeight = 40;
  
  // Modern gradient header
  const color = PROFESSIONAL_COLORS[variant];
  doc.setFillColor(color.main);
  doc.rect(0, 0, pageWidth, headerHeight, 'F');
  
  // Add subtle overlay for depth
  doc.setFillColor(255, 255, 255, 0.05);
  doc.rect(0, 0, pageWidth, headerHeight / 2, 'F');
  
  // Logo section
  const logoSize = 18;
  const logoX = SPACING.lg;
  const logoY = 10;
  
  try {
    doc.addImage(
      '/lovable-uploads/88ef4e0f-4d33-458c-98f4-7b644e5b8588.png', 
      'PNG', 
      logoX, 
      logoY, 
      logoSize, 
      logoSize
    );
  } catch (error) {
    // Modern fallback logo
    doc.setFillColor(255, 255, 255, 0.9);
    doc.roundedRect(logoX, logoY, logoSize, logoSize, 3, 3, 'F');
    doc.setTextColor(color.main);
    doc.setFontSize(12);
    doc.setFont("helvetica", "bold");
    doc.text("PA", logoX + logoSize/2, logoY + logoSize/2 + 2, { align: "center" });
  }
  
  // Brand text
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(18);
  doc.setFont("helvetica", "bold");
  doc.text("PendlerApp", logoX + logoSize + 8, 18);
  
  doc.setFontSize(9);
  doc.setFont("helvetica", "normal");
  doc.text("Profesionální řešení pro české pendlery", logoX + logoSize + 8, 24);
  
  // Date and time
  const now = new Date();
  const dateStr = now.toLocaleDateString('cs-CZ', {
    year: 'numeric',
    month: 'long', 
    day: 'numeric'
  });
  const timeStr = now.toLocaleTimeString('cs-CZ', {
    hour: '2-digit',
    minute: '2-digit'
  });
  
  doc.setFontSize(8);
  doc.setTextColor(255, 255, 255, 0.8);
  doc.text(dateStr, pageWidth - SPACING.lg, 16, { align: "right" });
  doc.text(timeStr, pageWidth - SPACING.lg, 22, { align: "right" });
  
  // Document title
  doc.setTextColor(PROFESSIONAL_COLORS.neutral[900]);
  doc.setFontSize(TYPOGRAPHY.h1.size);
  doc.setFont("helvetica", "bold");
  doc.text(title, pageWidth / 2, headerHeight + 20, { align: "center" });
  
  // Subtitle
  if (subtitle) {
    doc.setFontSize(TYPOGRAPHY.body.size);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(PROFESSIONAL_COLORS.neutral[600]);
    doc.text(subtitle, pageWidth / 2, headerHeight + 28, { align: "center" });
  }
  
  // Modern separator line with gradient effect
  const separatorY = headerHeight + (subtitle ? 34 : 28);
  doc.setDrawColor(PROFESSIONAL_COLORS.primary.main);
  doc.setLineWidth(2);
  doc.line(SPACING.xl, separatorY, pageWidth - SPACING.xl, separatorY);
  
  // Add subtle shadow
  doc.setDrawColor(PROFESSIONAL_COLORS.neutral[200]);
  doc.setLineWidth(0.5);
  doc.line(SPACING.xl, separatorY + 1, pageWidth - SPACING.xl, separatorY + 1);
};

// Professional footer
export const addProfessionalFooter = (doc: jsPDF): void => {
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  const footerHeight = 20;
  const pageCount = doc.getNumberOfPages();
  
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    
    // Footer background
    doc.setFillColor(PROFESSIONAL_COLORS.neutral[50]);
    doc.rect(0, pageHeight - footerHeight, pageWidth, footerHeight, 'F');
    
    // Top border
    doc.setDrawColor(PROFESSIONAL_COLORS.neutral[200]);
    doc.setLineWidth(0.5);
    doc.line(0, pageHeight - footerHeight, pageWidth, pageHeight - footerHeight);
    
    // Page number
    doc.setFontSize(TYPOGRAPHY.small.size);
    doc.setTextColor(PROFESSIONAL_COLORS.neutral[600]);
    doc.setFont("helvetica", "normal");
    doc.text(`Strana ${i} z ${pageCount}`, SPACING.lg, pageHeight - 8);
    
    // Footer text
    doc.text(
      `© ${new Date().getFullYear()} PendlerApp | www.pendlerapp.cz`,
      pageWidth / 2,
      pageHeight - 8,
      { align: "center" }
    );
    
    // Generated timestamp
    doc.setFontSize(TYPOGRAPHY.caption.size);
    doc.setTextColor(PROFESSIONAL_COLORS.neutral[400]);
    doc.text(
      `Vygenerováno: ${new Date().toLocaleString('cs-CZ')}`,
      pageWidth - SPACING.lg,
      pageHeight - 8,
      { align: "right" }
    );
  }
};

// Professional table creation
export const createProfessionalTable = async (
  doc: jsPDF,
  data: { head: string[][]; body: string[][] },
  startY: number,
  options?: any
) => {
  const autoTable = await import("jspdf-autotable");
  
  const defaultOptions = {
    startY,
    theme: 'grid',
    headStyles: {
      fillColor: [PROFESSIONAL_COLORS.primary.main.slice(1, 3), PROFESSIONAL_COLORS.primary.main.slice(3, 5), PROFESSIONAL_COLORS.primary.main.slice(5, 7)].map(hex => parseInt(hex, 16)),
      textColor: [255, 255, 255],
      fontStyle: 'bold',
      fontSize: TYPOGRAPHY.body.size,
      halign: 'left',
      cellPadding: { top: 6, right: 8, bottom: 6, left: 8 }
    },
    bodyStyles: {
      fontSize: TYPOGRAPHY.body.size,
      cellPadding: { top: 5, right: 8, bottom: 5, left: 8 },
      textColor: [PROFESSIONAL_COLORS.neutral[800].slice(1, 3), PROFESSIONAL_COLORS.neutral[800].slice(3, 5), PROFESSIONAL_COLORS.neutral[800].slice(5, 7)].map(hex => parseInt(hex, 16))
    },
    alternateRowStyles: {
      fillColor: [PROFESSIONAL_COLORS.neutral[50].slice(1, 3), PROFESSIONAL_COLORS.neutral[50].slice(3, 5), PROFESSIONAL_COLORS.neutral[50].slice(5, 7)].map(hex => parseInt(hex, 16))
    },
    styles: {
      font: 'helvetica',
      lineColor: [PROFESSIONAL_COLORS.neutral[200].slice(1, 3), PROFESSIONAL_COLORS.neutral[200].slice(3, 5), PROFESSIONAL_COLORS.neutral[200].slice(5, 7)].map(hex => parseInt(hex, 16)),
      lineWidth: 0.5
    },
    margin: { left: SPACING.lg, right: SPACING.lg },
    ...options
  };
  
  autoTable.default(doc, {
    head: data.head,
    body: data.body,
    ...defaultOptions
  });
};

// Professional section header
export const addProfessionalSection = (
  doc: jsPDF, 
  title: string, 
  yPosition: number,
  variant: 'primary' | 'secondary' | 'accent' = 'primary'
): number => {
  const pageWidth = doc.internal.pageSize.width;
  const sectionHeight = 14;
  
  // Section background with rounded corners
  const color = PROFESSIONAL_COLORS[variant];
  doc.setFillColor(color.light);
  doc.setFillColor(color.main.slice(1, 3), color.main.slice(3, 5), color.main.slice(5, 7));
  doc.setFillColor(255, 255, 255, 0.05);
  doc.roundedRect(SPACING.lg, yPosition, pageWidth - (SPACING.lg * 2), sectionHeight, 2, 2, 'F');
  
  // Section title
  doc.setFontSize(TYPOGRAPHY.h3.size);
  doc.setFont("helvetica", "bold");
  doc.setTextColor(PROFESSIONAL_COLORS.neutral[800]);
  doc.text(title, SPACING.lg + 4, yPosition + 9);
  
  // Accent line
  doc.setDrawColor(color.main.slice(1, 3), color.main.slice(3, 5), color.main.slice(5, 7));
  doc.setLineWidth(3);
  doc.line(SPACING.lg + 4, yPosition + 11, SPACING.lg + 40, yPosition + 11);
  
  return yPosition + sectionHeight + SPACING.md;
};

// Professional info box
export const addProfessionalInfoBox = (
  doc: jsPDF,
  text: string,
  yPosition: number,
  type: 'info' | 'success' | 'warning' | 'error' = 'info'
): number => {
  const pageWidth = doc.internal.pageSize.width;
  const boxPadding = 8;
  const iconSize = 4;
  
  const colors = {
    info: { bg: PROFESSIONAL_COLORS.primary.main, icon: 'ℹ️' },
    success: { bg: PROFESSIONAL_COLORS.success, icon: '✅' },
    warning: { bg: PROFESSIONAL_COLORS.warning, icon: '⚠️' },
    error: { bg: PROFESSIONAL_COLORS.error, icon: '❌' }
  };
  
  const config = colors[type];
  const textHeight = doc.getTextDimensions(text, { maxWidth: pageWidth - (SPACING.lg * 2) - boxPadding - iconSize }).h;
  const boxHeight = Math.max(16, textHeight + boxPadding);
  
  // Box background with opacity
  doc.setFillColor(config.bg.slice(1, 3), config.bg.slice(3, 5), config.bg.slice(5, 7));
  doc.setFillColor(255, 255, 255, 0.1);
  doc.roundedRect(SPACING.lg, yPosition, pageWidth - (SPACING.lg * 2), boxHeight, 4, 4, 'F');
  
  // Border
  doc.setDrawColor(config.bg.slice(1, 3), config.bg.slice(3, 5), config.bg.slice(5, 7));
  doc.setLineWidth(1);
  doc.roundedRect(SPACING.lg, yPosition, pageWidth - (SPACING.lg * 2), boxHeight, 4, 4, 'S');
  
  // Icon (simplified as text)
  doc.setFontSize(12);
  doc.setTextColor(config.bg.slice(1, 3), config.bg.slice(3, 5), config.bg.slice(5, 7));
  doc.text(config.icon, SPACING.lg + 4, yPosition + 8);
  
  // Text content
  doc.setFontSize(TYPOGRAPHY.body.size);
  doc.setFont("helvetica", "normal");
  doc.setTextColor(PROFESSIONAL_COLORS.neutral[700]);
  doc.text(text, SPACING.lg + 12, yPosition + 8, { 
    maxWidth: pageWidth - (SPACING.lg * 2) - 12
  });
  
  return yPosition + boxHeight + SPACING.md;
};

// Professional stats card
export const addProfessionalStatsCard = (
  doc: jsPDF,
  stats: Array<{ label: string; value: string; color?: string }>,
  yPosition: number
): number => {
  const pageWidth = doc.internal.pageSize.width;
  const cardWidth = (pageWidth - (SPACING.lg * 2) - (SPACING.md * (stats.length - 1))) / stats.length;
  const cardHeight = 24;
  
  stats.forEach((stat, index) => {
    const x = SPACING.lg + (index * (cardWidth + SPACING.md));
    
    // Card background
    doc.setFillColor(PROFESSIONAL_COLORS.neutral[50]);
    doc.roundedRect(x, yPosition, cardWidth, cardHeight, 3, 3, 'F');
    
    // Card border
    doc.setDrawColor(PROFESSIONAL_COLORS.neutral[200]);
    doc.setLineWidth(0.5);
    doc.roundedRect(x, yPosition, cardWidth, cardHeight, 3, 3, 'S');
    
    // Value
    doc.setFontSize(16);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(stat.color || PROFESSIONAL_COLORS.primary.main);
    doc.text(stat.value, x + cardWidth/2, yPosition + 10, { align: "center" });
    
    // Label
    doc.setFontSize(TYPOGRAPHY.small.size);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(PROFESSIONAL_COLORS.neutral[600]);
    doc.text(stat.label, x + cardWidth/2, yPosition + 18, { align: "center" });
  });
  
  return yPosition + cardHeight + SPACING.lg;
};

// Export all functions
export {
  initializeProfessionalPDF,
  addProfessionalHeader,
  addProfessionalFooter,
  createProfessionalTable,
  addProfessionalSection,
  addProfessionalInfoBox,
  addProfessionalStatsCard
};
