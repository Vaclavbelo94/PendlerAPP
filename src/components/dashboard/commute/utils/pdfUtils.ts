
import { 
  initializeProfessionalPDF, 
  addProfessionalHeader, 
  addProfessionalFooter,
  createProfessionalTable,
  addProfessionalSection,
  addProfessionalInfoBox,
  addProfessionalStatsCard,
  PROFESSIONAL_COLORS,
  SPACING
} from "@/utils/pdf/professionalPdfHelper";

// Enhanced sample data with more realistic values
const detailedData = [
  { name: '1. t√Ωden', auto: 42, mhd: 32, cost: 356 },
  { name: '2. t√Ωden', auto: 36, mhd: 28, cost: 306 },
  { name: '3. t√Ωden', auto: 38, mhd: 30, cost: 323 },
  { name: '4. t√Ωden', auto: 32, mhd: 38, cost: 272 }
];

export const generateComparisonPdf = async () => {
  // Initialize professional PDF
  const doc = initializeProfessionalPDF();
  
  // Add professional header
  addProfessionalHeader(doc, "Anal√Ωza doj√≠≈ædƒõn√≠", "Mƒõs√≠ƒçn√≠ p≈ôehled n√°klad≈Ø a vzd√°lenost√≠ ‚Ä¢ PendlerApp Professional", 'accent');
  
  let currentY = 75;
  
  // Professional statistics overview
  const totalDistance = detailedData.reduce((sum, item) => sum + item.auto + item.mhd, 0);
  const totalCost = detailedData.reduce((sum, item) => sum + item.cost, 0);
  const averageDaily = totalDistance / 20; // 20 working days
  const co2Saved = 8.2;
  
  const stats = [
    { label: 'Celkov√° vzd√°lenost', value: `${totalDistance} km`, color: PROFESSIONAL_COLORS.primary.main },
    { label: 'Celkov√© n√°klady', value: `${totalCost} Kƒç`, color: PROFESSIONAL_COLORS.accent.main },
    { label: 'Denn√≠ pr≈Ømƒõr', value: `${averageDaily.toFixed(1)} km`, color: PROFESSIONAL_COLORS.secondary.main },
    { label: '√öspora CO‚ÇÇ', value: `${co2Saved} kg`, color: PROFESSIONAL_COLORS.success }
  ];
  
  currentY = addProfessionalStatsCard(doc, stats, currentY);
  
  // Transport mode breakdown
  currentY = addProfessionalSection(doc, "üöó Anal√Ωza dopravn√≠ch prost≈ôedk≈Ø", currentY, 'primary');
  
  const autoTotal = detailedData.reduce((sum, item) => sum + item.auto, 0);
  const mhdTotal = detailedData.reduce((sum, item) => sum + item.mhd, 0);
  const autoPercent = Math.round((autoTotal / totalDistance) * 100);
  const mhdPercent = 100 - autoPercent;
  
  await createProfessionalTable(doc, {
    head: [['Dopravn√≠ prost≈ôedek', 'Vzd√°lenost (km)', 'Pod√≠l (%)', 'N√°klady na km', 'Celkov√© n√°klady']],
    body: [
      ['Automobil', autoTotal.toString(), `${autoPercent}%`, '8,50 Kƒç', `${Math.round(autoTotal * 8.5)} Kƒç`],
      ['MHD', mhdTotal.toString(), `${mhdPercent}%`, '3,20 Kƒç', `${Math.round(mhdTotal * 3.2)} Kƒç`],
      ['CELKEM', totalDistance.toString(), '100%', '‚Äî', `${totalCost} Kƒç`]
    ]
  }, currentY);
  
  // Environmental impact
  currentY = (doc as any).lastAutoTable.finalY + SPACING.lg;
  currentY = addProfessionalInfoBox(
    doc, 
    `üå± Ekologick√Ω dopad: Va≈°e rozhodnut√≠ zv√Ω≈°it pod√≠l MHD p≈ôispƒõla k √∫spo≈ôe ${co2Saved} kg CO‚ÇÇ oproti ƒçistƒõ automobilov√© dopravƒõ. To odpov√≠d√° absorpci CO‚ÇÇ jedn√≠m stromem za 4 mƒõs√≠ce.`, 
    currentY, 
    'success'
  );
  
  // Weekly detailed breakdown
  currentY = addProfessionalSection(doc, "üìä T√Ωdenn√≠ detailn√≠ p≈ôehled", currentY, 'secondary');
  
  await createProfessionalTable(doc, {
    head: [['T√Ωden', 'Automobil (km)', 'MHD (km)', 'Celkem (km)', 'N√°klady (Kƒç)', 'Efektivita']],
    body: detailedData.map(item => [
      item.name, 
      item.auto.toString(), 
      item.mhd.toString(),
      (item.auto + item.mhd).toString(),
      item.cost.toString(),
      item.mhd > item.auto ? 'üü¢ Optim√°ln√≠' : 'üü° Dobr√°'
    ])
  }, currentY);
  
  // Optimization recommendations
  currentY = (doc as any).lastAutoTable.finalY + SPACING.lg;
  currentY = addProfessionalSection(doc, "üí° Doporuƒçen√≠ pro optimalizaci", currentY, 'accent');
  
  const recommendations = [
    'Zv√Ω≈°en√≠ pod√≠lu MHD o dal≈°√≠ch 10% = √∫spora 150 Kƒç mƒõs√≠ƒçnƒõ',
    'Vyu≈æit√≠ park & ride syst√©mu pro dlouh√© trasy',
    'Pl√°nov√°n√≠ cest mimo ≈°piƒçku pro rychlej≈°√≠ MHD',
    'Kombinace kola + MHD pro kr√°tk√© √∫seky'
  ];
  
  await createProfessionalTable(doc, {
    head: [['Doporuƒçen√≠', 'Potenci√°ln√≠ p≈ô√≠nos']],
    body: recommendations.map((rec, index) => [
      `${index + 1}. ${rec.split(' = ')[0]}`,
      rec.includes(' = ') ? rec.split(' = ')[1] : 'Ekologick√Ω a zdravotn√≠ benefit'
    ])
  }, currentY);
  
  // Final summary
  currentY = (doc as any).lastAutoTable.finalY + SPACING.lg;
  currentY = addProfessionalInfoBox(
    doc, 
    `üìà Shrnut√≠: V√°≈° souƒçasn√Ω mix dopravy je ${mhdPercent}% ekologick√Ω. Optimalizac√≠ m≈Ø≈æete dos√°hnout a≈æ 20% √∫spory n√°klad≈Ø p≈ôi zachov√°n√≠ komfortu doj√≠≈ædƒõn√≠.`, 
    currentY, 
    'info'
  );
  
  // Add professional footer
  addProfessionalFooter(doc);
  
  // Save with professional filename
  const fileName = `PendlerApp_Analyza_Dojizdeni_${new Date().toISOString().slice(0, 7)}.pdf`;
  doc.save(fileName);
};
