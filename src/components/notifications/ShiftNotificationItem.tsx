import React from 'react';
import { Calendar, Clock, MapPin, User, AlertCircle, CheckCircle } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useTranslation } from 'react-i18next';
import { SupabaseNotification } from '@/hooks/useSupabaseNotifications';
import { cn } from '@/lib/utils';

interface ShiftNotificationItemProps {
  notification: SupabaseNotification;
  onMarkAsRead?: (id: string) => void;
  onDelete?: (id: string) => void;
}

export const ShiftNotificationItem: React.FC<ShiftNotificationItemProps> = ({
  notification,
  onMarkAsRead,
  onDelete
}) => {
  const { t } = useTranslation('notifications');
  
  // Extract shift info from metadata
  const shiftType = notification.metadata?.shift_type || '';
  const startTime = notification.metadata?.start_time || '';
  const endTime = notification.metadata?.end_time || '';
  const shiftDate = notification.related_to?.shift_date || '';
  const isAutoGenerated = notification.metadata?.auto_generated || false;
  
  const formatTime = (timeString: string) => {
    if (!timeString) return '';
    return timeString.substring(0, 5); // HH:MM format
  };

  const formatDate = (dateString: string) => {
    if (!dateString) return '';
    const date = new Date(dateString + 'T00:00:00');
    return date.toLocaleDateString('cs-CZ', {
      weekday: 'long',
      day: 'numeric',
      month: 'long'
    });
  };

  const getShiftTypeColor = (type: string) => {
    switch (type?.toLowerCase()) {
      case 'morning':
      case 'ranní':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'afternoon':
      case 'odpolední':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'night':
      case 'noční':
        return 'bg-purple-100 text-purple-800 border-purple-200';
      case 'overtime':
        return 'bg-red-100 text-red-800 border-red-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getShiftTypeLabel = (type: string) => {
    const { t } = useTranslation('shifts');
    switch (type?.toLowerCase()) {
      case 'morning':
      case 'ranní':
        return t('shiftTypes.morning', 'Ranní');
      case 'afternoon':
      case 'odpolední':
        return t('shiftTypes.afternoon', 'Odpolední');
      case 'night':
      case 'noční':
        return t('shiftTypes.night', 'Noční');
      case 'overtime':
        return t('overtime', 'Přesčas');
      default:
        return type;
    }
  };

  const getShiftTypeIcon = (type: string) => {
    switch (type?.toLowerCase()) {
      case 'morning':
      case 'ranní':
        return <Clock className="h-4 w-4" />;
      case 'afternoon':  
      case 'odpolední':
        return <Clock className="h-4 w-4" />;
      case 'night':
      case 'noční':
        return <Clock className="h-4 w-4" />;
      case 'overtime':
        return <AlertCircle className="h-4 w-4" />;
      default:
        return <Calendar className="h-4 w-4" />;
    }
  };

  const formatRelativeTime = (dateString: string) => {
    const now = new Date();
    const notificationDate = new Date(dateString);
    const diffInMinutes = Math.floor((now.getTime() - notificationDate.getTime()) / (1000 * 60));
    
    if (diffInMinutes < 1) return t('time.now');
    if (diffInMinutes < 60) return `${diffInMinutes} min`;
    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} h`;
    return `${Math.floor(diffInMinutes / 1440)} d`;
  };

  return (
    <Card className={cn(
      "transition-all duration-200 hover:shadow-md",
      !notification.read && "ring-2 ring-primary/20 bg-primary/5"
    )}>
      <CardContent className="p-4">
        <div className="flex items-start justify-between gap-3">
          <div className="flex-1 space-y-2">
            {/* Header */}
            <div className="flex items-center gap-2 flex-wrap">
              <div className="flex items-center gap-1">
                {getShiftTypeIcon(shiftType)}
                <h4 className="font-medium text-foreground">
                  {notification.title}
                </h4>
              </div>
              
              {!notification.read && (
                <Badge variant="default" className="h-5 text-xs">
                  {t('status.unread')}
                </Badge>
              )}
              
              {isAutoGenerated && (
                <Badge variant="secondary" className="h-5 text-xs">
                  Auto
                </Badge>
              )}
            </div>

            {/* Shift Details */}
            <div className="space-y-2">
              <p className="text-sm text-muted-foreground">
                {notification.message}
              </p>
              
              {shiftDate && (
                <div className="flex items-center gap-4 text-xs text-muted-foreground">
                  <div className="flex items-center gap-1">
                    <Calendar className="h-3 w-3" />
                    <span>{formatDate(shiftDate)}</span>
                  </div>
                  
                  {startTime && endTime && (
                    <div className="flex items-center gap-1">
                      <Clock className="h-3 w-3" />
                      <span>{formatTime(startTime)} - {formatTime(endTime)}</span>
                    </div>
                  )}
                  
                   {shiftType && (
                     <Badge 
                       variant="outline" 
                       className={cn("h-5 text-xs border", getShiftTypeColor(shiftType))}
                     >
                       {getShiftTypeLabel(shiftType)}
                     </Badge>
                   )}
                </div>
              )}
            </div>

            {/* Footer */}
            <div className="flex items-center justify-between pt-2">
              <span className="text-xs text-muted-foreground">
                {formatRelativeTime(notification.created_at)}
              </span>
              
              <div className="flex items-center gap-1">
                {!notification.read && onMarkAsRead && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => onMarkAsRead(notification.id)}
                    className="h-7 px-2 text-xs"
                  >
                    <CheckCircle className="h-3 w-3 mr-1" />
                    {t('actions.markAsRead')}
                  </Button>
                )}
              </div>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};